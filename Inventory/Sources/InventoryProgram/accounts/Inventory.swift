/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import BeetSolana
import Beet
import Solana


/**
* Arguments used to create {@link Inventory}
* @category Accounts
* @category generated
*/
public protocol InventoryArgs {
    
     var assets: [PublicKey] { get }
}

/**
 * Holds the data for the {@link Inventory} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
public struct Inventory: InventoryArgs {
  

  public let assets: [PublicKey]

  /**
   * Creates a {@link Inventory} instance from the provided args.
   */
  public static func fromArgs(args: Args) -> Inventory {
    return Inventory(
        assets: args["assets"] as! [PublicKey]
    )
  }
  /**
   * Deserializes the {@link Inventory} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func fromAccountInfo(
    accountInfo: Foundation.Data,
    offset:Int=0
  ) -> ( Inventory, Int )  {
    return Inventory.deserialize(buf: accountInfo, offset: offset)
  }
  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Inventory} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  public static func fromAccountAddress(
    connection: Api,
    address: PublicKey,
    onComplete: @escaping (Result<Inventory, Error>) -> Void
  ) {
    connection.getAccountInfo(account: address.base58EncodedString) { result in
        switch result {
            case .success(let pureData):
                if let data = pureData.data?.value {
                    onComplete(.success(Inventory.deserialize(buf: data).0))
                } else {
                    onComplete(.failure(SolanaError.nullValue))
                }
            case .failure(let error):
                onComplete(.failure(error))
        }
    }
  }
  /**
   * Deserializes the {@link Inventory} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func deserialize(
    buf: Foundation.Data,
    offset: Int = 0
  ) -> ( Inventory, Int ) {
    return inventoryBeet.deserialize(buffer: buf, offset: offset)
  }
  /**
   * Serializes the {@link Inventory} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  public func serialize() -> ( Foundation.Data, Int ) {
    return inventoryBeet.serialize(instance: [
        "assets" : self.assets
        ])
  }
  /**
* Returns the byteSize of a {@link Buffer} holding the serialized data of
* {@link Inventory} for the provided args.
*
* @param args need to be provided since the byte size for this account
* depends on them
*/
static func byteSize(args: InventoryArgs) -> UInt64 {
    return UInt64(inventoryBeet.toFixedFromValue(val: args).byteSize)
}
/**
* Fetches the minimum balance needed to exempt an account holding
* {@link Inventory} data from rent
*
* @param args need to be provided since the byte size for this account
* depends on them
* @param connection used to retrieve the rent exemption information
*/
static func getMinimumBalanceForRentExemption(
    args: InventoryArgs,
    connection: Api,
    commitment: Commitment?,
    onComplete: @escaping(Result<UInt64, Error>) -> Void
) {
    return connection.getMinimumBalanceForRentExemption(dataLength: Inventory.byteSize(args: args), commitment: commitment, onComplete: onComplete)
}
}
  /**
   * @category Accounts
   * @category generated
   */
  public let inventoryBeet = FixableBeetStruct<Inventory>(
    fields:[
        
        ("assets", Beet.fixableBeat(array(element: Beet.fixedBeet(.init(value: .scalar(BeetPublicKey()))))))
    ],
    construct: Inventory.fromArgs,
    description: "Inventory"
)
