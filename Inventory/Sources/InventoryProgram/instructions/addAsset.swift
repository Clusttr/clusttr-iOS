/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category AddAsset
 * @category generated
 */
public struct AddAssetInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let amount: UInt64

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = addAssetInstructionDiscriminator,
        amount: UInt64
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.amount = amount
    }
}
/**
 * @category Instructions
 * @category AddAsset
 * @category generated
 */
public let addAssetStruct = FixableBeetArgsStruct<AddAssetInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("amount", Beet.fixedBeet(.init(value: .scalar(u64()))))
    ],
    description: "AddAssetInstructionArgs"
)
/**
* Accounts required by the _addAsset_ instruction
*
* @property [_writable_, **signer**] payer  
* @property [_writable_] userAssetAccount  
* @property [_writable_] inventory  
* @property [_writable_] assetInfo  
* @property [_writable_] mintVault  
* @property [] mint   
* @category Instructions
* @category AddAsset
* @category generated
*/
public struct AddAssetInstructionAccounts {
    let payer: PublicKey
    let userAssetAccount: PublicKey
    let inventory: PublicKey
    let assetInfo: PublicKey
    let mintVault: PublicKey
    let mint: PublicKey
    let systemProgram: PublicKey?
    let tokenProgram: PublicKey?

    public init(
        payer: PublicKey,
        userAssetAccount: PublicKey,
        inventory: PublicKey,
        assetInfo: PublicKey,
        mintVault: PublicKey,
        mint: PublicKey,
        systemProgram: PublicKey? = nil,
        tokenProgram: PublicKey? = nil
    ) {
        self.payer = payer
        self.userAssetAccount = userAssetAccount
        self.inventory = inventory
        self.assetInfo = assetInfo
        self.mintVault = mintVault
        self.mint = mint
        self.systemProgram = systemProgram
        self.tokenProgram = tokenProgram
    }
}

public let addAssetInstructionDiscriminator = [81, 53, 134, 142, 243, 73, 42, 179] as [UInt8]

/**
* Creates a _AddAsset_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category AddAsset
* @category generated
*/
public func createAddAssetInstruction(accounts: AddAssetInstructionAccounts, 
args: AddAssetInstructionArgs, programId: PublicKey=PublicKey(string: "8oRGerutEMGTumnzzgxbsCEfLLkghC3cdT6EadZaPh3Q")!) -> TransactionInstruction {

    let data = addAssetStruct.serialize(
            instance: ["instructionDiscriminator": addAssetInstructionDiscriminator,
"amount": args.amount])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.userAssetAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.inventory,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.assetInfo,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mintVault,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}