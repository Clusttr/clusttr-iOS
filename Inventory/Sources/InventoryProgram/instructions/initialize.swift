/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category Initialize
 * @category generated
 */
public struct InitializeInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = initializeInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category Initialize
 * @category generated
 */
public let initializeStruct = FixableBeetArgsStruct<InitializeInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "InitializeInstructionArgs"
)
/**
* Accounts required by the _initialize_ instruction
*
* @property [_writable_, **signer**] payer  
* @property [_writable_] inventory   
* @category Instructions
* @category Initialize
* @category generated
*/
public struct InitializeInstructionAccounts {
    let payer: PublicKey
    let inventory: PublicKey
    let systemProgram: PublicKey?

    public init(
        payer: PublicKey,
        inventory: PublicKey,
        systemProgram: PublicKey? = nil
    ) {
        self.payer = payer
        self.inventory = inventory
        self.systemProgram = systemProgram
    }
}

public let initializeInstructionDiscriminator = [175, 175, 109, 31, 13, 152, 155, 237] as [UInt8]

/**
* Creates a _Initialize_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category Initialize
* @category generated
*/
public func createInitializeInstruction(accounts: InitializeInstructionAccounts, 
programId: PublicKey=PublicKey(string: "8oRGerutEMGTumnzzgxbsCEfLLkghC3cdT6EadZaPh3Q")!) -> TransactionInstruction {

    let data = initializeStruct.serialize(
            instance: ["instructionDiscriminator": initializeInstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.inventory,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}